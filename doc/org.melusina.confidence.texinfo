\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename org.melusina.confidence.info
@settitle Confidence Manual
@c %**end of header

@c for install-info
@dircategory Software development
@direntry
* org.melusina.confidence: A Simple Interactive Test Framework for Common Lisp
@end direntry

@copying
@b{Confidence} software and associated documentation is distributed
under the terms of the MIT License.

@quotation
Copyright © 2019–2022 Michaël Le Barbier
All rights reserved.

This file must be used under the terms of the MIT License.
This source file is licensed as described in the file LICENSE, which
you should have received as part of this distribution. The terms
are also available at https://opensource.org/licenses/MIT
@end quotation

@end copying
@titlepage

@title Confidence Manual
@subtitle draft version

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@contents

@c We use @andkey, etc to escape & from TeX in lambda lists --
@c so we need to define them for info as well.
@macro andallowotherkeys
&allow-other-keys@tie{}
@end macro
@macro andoptional
&optional@tie{}
@end macro
@macro andrest
&rest@tie{}
@end macro
@macro andkey
&key@tie{}
@end macro
@macro andbody
&body@tie{}
@end macro

@ifnottex

@include include/ifnottex.texinfo

@node Top, , ,
@comment  node-name,  next,  previous,  up
@top Confidence

@insertcopying

@menu
* Introduction::
* Assertions::
* Testcases::
* Specialities::
@end menu

@end ifnottex

@node Introduction, Assertions, Top, Top
@chapter Introduction

@b{Confidence} is a test framework for Common Lisp that focuses on
simplicty. It avoids bureaucracy and makes it easy to work
interactively, without a complicated setup, and with explicit
functions and decisions.

@b{Confidence} exposes the developer with two abstractions: assertions
and testcases.  An @i{assertion} is essentially a @i{predicate} which
yields a detailed explanation when it fails.  This is useful, so that
the developer has enough context to understand the failure without
scrutinizing the application state. A @i{testcase} is a function that
runs assertions in a prepared environment and returns aggregated
results about these assertions. A testcase can call other testcases
and testcases can be parametrised---as functions are.

This very simple organisation makes @b{Confidence} easy to pickup and
to use, it decreases the number of concepts required.  For instance, a
specific @i{fixture} feature is not needed, as familiar constructions
like let-bindings or with-macros will work as expected: a testcase is a
function. A special kind of function, but a function.


@node Assertions, Define Assertions, Introduction, Top
@chapter Assertions


@menu
* Define Assertions::
* Comparison Assertions::
* Condition Assertions::
* Character Assertions::
* String Assertions::
* List Assertions::
* Vector Assertions::
* Floating Number Assertions::
@end menu

@node Define Assertions, Comparison Assertions, Assertions, Assertions
@section Define Assertions
@include include/macro-org.melusina.confidence-define-assertion.texinfo

@node Comparison Assertions, Condition Assertions, Define Assertions, Assertions
@section Comparison Assertions

@include include/fun-org.melusina.confidence-assert-t.texinfo
@include include/fun-org.melusina.confidence-assert-t-star.texinfo
@include include/fun-org.melusina.confidence-assert-nil.texinfo
@include include/fun-org.melusina.confidence-assert-type.texinfo
@include include/fun-org.melusina.confidence-assert-eq.texinfo
@include include/fun-org.melusina.confidence-assert-eql.texinfo
@include include/fun-org.melusina.confidence-assert-equal.texinfo
@include include/fun-org.melusina.confidence-assert-equalp.texinfo
@include include/fun-org.melusina.confidence-assert-equals.texinfo
@include include/fun-org.melusina.confidence-assert-lt.texinfo
@include include/fun-org.melusina.confidence-assert-gt.texinfo
@include include/fun-org.melusina.confidence-assert-lt-equals.texinfo
@include include/fun-org.melusina.confidence-assert-gt-equals.texinfo

@node Condition Assertions, Character Assertions, Comparison Assertions, Assertions
@section Condition Assertions

@include include/macro-org.melusina.confidence-assert-condition.texinfo

@node Character Assertions, String Assertions, Condition Assertions, Assertions
@section Character Assertions

@include include/fun-org.melusina.confidence-assert-char-equal.texinfo
@include include/fun-org.melusina.confidence-assert-char-equals.texinfo
@include include/fun-org.melusina.confidence-assert-char-gt.texinfo
@include include/fun-org.melusina.confidence-assert-char-gt-equals.texinfo
@include include/fun-org.melusina.confidence-assert-char-lt.texinfo
@include include/fun-org.melusina.confidence-assert-char-lt-equals.texinfo

@node String Assertions, List Assertions, Character Assertions, Assertions
@section String Assertions

@include include/fun-org.melusina.confidence-assert-string-equal.texinfo
@include include/fun-org.melusina.confidence-assert-string-equals.texinfo
@include include/fun-org.melusina.confidence-assert-string-gt.texinfo
@include include/fun-org.melusina.confidence-assert-string-gt-equals.texinfo
@include include/fun-org.melusina.confidence-assert-string-lt.texinfo
@include include/fun-org.melusina.confidence-assert-string-lt-equals.texinfo
@include include/fun-org.melusina.confidence-assert-string-match.texinfo

@node List Assertions, Vector Assertions, String Assertions, Assertions
@section List Assertions

@include include/fun-org.melusina.confidence-assert-list-equal.texinfo
@include include/fun-org.melusina.confidence-assert-set-equal.texinfo
@include include/fun-org.melusina.confidence-assert-subsetp.texinfo

@node Vector Assertions, Floating Number Assertions, List Assertions, Assertions
@section Vector Assertions

@include include/fun-org.melusina.confidence-assert-vector-equal.texinfo

@node Floating Number Assertions, Testcases, Vector Assertions, Assertions
@section Floating Number Assertions

@include include/var-org.melusina.confidence-star-double-float-precision-star.texinfo
@include include/var-org.melusina.confidence-star-single-float-precision-star.texinfo
@include include/fun-org.melusina.confidence-assert-float-is-approximately-equal.texinfo
@include include/fun-org.melusina.confidence-assert-float-is-essentially-equal.texinfo
@include include/fun-org.melusina.confidence-assert-float-is-definitely-greater-than.texinfo
@include include/fun-org.melusina.confidence-assert-float-is-definitely-less-than.texinfo

@node Testcases, Specialities, Floating Number Assertions, Top
@chapter Testcases

The @i{define-testcase} macro allows to define @i{testcases}, which
are functions specially crafted to run @i{assertions} and build a
testsuite.  There are three important differences with regular
functions. The first one is that calls to assertions in a testcase are
instrumented, so that a global success report is produced. The second
difference is that when a testcase is run as a toplevel form the
testcase prints a summary of results when done. The third difference
is that some specific @i{restarts} are available in this context.

@section Define a Testcase

@include include/macro-org.melusina.confidence-define-testcase.texinfo
@include include/class-org.melusina.confidence-testcase-outcome.texinfo

@section Describe Failed Assertions

When an assertion fails, it prints a description on the
@code{*error-output*}, unless the following configuration variable
is set to @code{nil}.

@include include/var-org.melusina.confidence-star-testcase-describe-failed-assertions-star.texinfo


@section Run Testcases in Batch

The @b{Confidence} system normally runs test cases in batch, which is
appropriate when it is used for fully automated tests, in continuous
integration and delivery pipelines.

@section Run Testcases Interactively

The @b{Confidence} system can be configured so that when a testcase
meets an unexpected condition, such as an error or an unsatisfied
assertion, the debugger is invoked. To do so, modify the variable
@code{*testcase-break-into-the-debugger-on-errors*} either directly
or with the function @code{testcase-break-into-the-debugger-on-errors}.

@include include/var-org.melusina.confidence-star-testcase-break-into-the-debugger-on-errors-star.texinfo
@include include/fun-org.melusina.confidence-testcase-break-into-the-debugger-on-errors.texinfo

When this configuration is active, the following @i{restarts} are
available in the debugger:

@itemize
@item
@b{ASSERTION-RETRY} Which retries to evaluate the arguments of the
failing assertion and the assertion itself.
@item
@b{TESTCASE-RETRY} Which retries the current testcase.
@item
@b{TESTCASE-CONTINUE} Which registers an error and continues the
current testcase.
@item
@b{TESTCASE-RETURN} Which registers an error and immediately returns
from the current testcase.
@item
@b{TESTCASE-STEP-UP} Which registers an error and continue the current
testcase without breaking into the debugger.
@item
@b{TESTCASE-SCROLL} Which registers an error and continue the current
testcase and other testcases higher in the call stack without breaking
into the debugger.
@end itemize

@section Add Testcases to the Export List of a Package

Defined testcases are automatically exported, which makes it easy to
call them from the REPL, the testsuite tool or to add them to
generated documentation.  It could however be desirable to explciitly
add them to the export list of a package.  To support this, the
@b{Confidence} system exports the following function:

@include include/fun-org.melusina.confidence-print-export-list-for-testcases.texinfo


@node Specialities, , Testcases, Top
@chapter Specialities

This chapter covers specialities such as test fixtures, building
hierarchies of tests, skipping tests known to fail, @i{etc.}

@section Test Fixtures

As testcases are actually functions the @b{Confidence} user does not
need any specific support to build test fixtures: using let-bindings
to fix the value of special variables and using with-macros to manage
test resources is just working as expected.

It is simple enough to define a with-macro in Common Lisp so that
@b{Confidence} does not provide an extra feature to do so. Just mind
the @code{unwind-protect} operator.


@section Test Hierarchies

Some test frameworks provide facilities to organise tests in
hierarchies, so that a testcase claims it belongs to one or several
testsuites.

Allowing a testcase to claim it belongs to one or several testsuites
makes it hard to tell which tests are actually run by a given
testsuite and @b{Confidence} prefers explicit workflows.  To define an
object that can be thought of as a testsuite, the @b{Confidence} user
only needs to define a testcase calling the testcases they want to add
to the testsuite.  As testcases are automatically exported, it makes
it very easy to call the testsuite from the command line. This
organisation also makes it easy to write more complex tests like
functional tests journeys, adding fixtures to the defined testsuite.

Having a testcase explicitly listing the other testcases it must run
is a simple and reliable organisation that never lies to the
programmer.  It also makes the test hierarchy navigable in IDEs
without supplementary tooling.


@section Test Tags

Some test frameworks provide a tag feature so that it possible to run
tests according to some tags attached to them.  Some popular Java
testing frameworks offer such a tag feature. Relying on this to decide
which tests to run obfuscates the test workflow and makes it hard to
understand which tests are run in a specific context.

Having a testcase explicitly listing the other testcases it must run
is a simple and reliable organisation that never lies to the
programmer.  It also makes the test hierarchy navigable in IDEs
without extra tooling.


@section Test Selection

When some tests are only relevant to some platform, or must be be
controlled by a feature, it is very easy to control their inclusion in
the testsuite using the feature-related reader macros.  It does not
seem necessary for @b{Confidence} to provide special features as the
usual Common Lisp operstors @code{when}, @code{unless} and
@code{return-from} can be used here.

@bye
